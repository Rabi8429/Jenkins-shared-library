
@Library('jenkins-shared-library') _
pipeline{
    agent any
    tools {
        maven 'maven3.9.2'
    }

    parameters{
        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        // Below parameters for docker image build with tag & version
        string(name: 'aws_account_id', description: "AWS Account ID", defaultValue: '927552331003')
        string(name: 'Region', description: "Region of ECR", defaultValue: 'us-east-1')
        string(name: 'ECR_REPO_NAME', description: "Name of the ECR Repo", defaultValue: 'myecr')
        string(name: 'cluster', description: "Name of the EKS Cluster", defaultValue: 'demo-cluster1')
    }
     environment{
        ACCESS_KEY = credentials('AWS_ACCESS_KEY_ID')
        SECRET_KEY = credentials('AWS_SECRET_KEY_ID')
     }



    stages{ 
        stage('Git Checkout'){
            
            when { expression {  params.action == 'create' } }

            steps{
                gitCheckout(
                    branch: "main",
                    url: "https://github.com/Rabi8429/demo-counter-app.git"
                )
            }
        }
        stage('Unit Test maven'){

            when { expression {  params.action == 'create' } }

            steps{

                mvnTest()
            }
        }
        stage('Integration Test Maven'){

            when { expression {  params.action == 'create' } }

            steps{

                mvnIntegrationTest()
            }
        }
        stage('Static Code Analysis maven'){

            when { expression {  params.action == 'create' } }

            steps{
                
                
                staticCodeAnalysis()
            }
        }
        stage('Quality Gate Status Check'){
            when { expression {  params.action == 'create' } }

            steps{
                
                qualityGateStatus()

            }
        }
        stage('Maven Build'){
            when { expression {  params.action == 'create' } }

            steps{
                
                mvnBuild()

            }
        }
        stage('Docker Image Build: ECR'){
            when { expression {  params.action == 'create' } }

            steps{
                
                dockerBuild("${params.aws_account_id}", "${params.Region}", "${params.ECR_REPO_NAME}")

            }
        }         
        stage('Docker Image Scan: trivy'){
            when { expression {  params.action == 'create' } }

            steps{
                
                dockerImageScan("${params.aws_account_id}", "${params.Region}", "${params.ECR_REPO_NAME}")
            }
        }
        stage('Docker Image Push: ECR'){
            when { expression {  params.action == 'create' } }

            steps{
                
                dockerImagePush("${params.aws_account_id}", "${params.Region}", "${params.ECR_REPO_NAME}")
            }
        }
        stage('Docker Image Cleanup: ECR'){
            when { expression {  params.action == 'create' } }

            steps{
                
                dockerImageCleanup("${params.aws_account_id}", "${params.Region}", "${params.ECR_REPO_NAME}")
            }
        }
        stage('Create EKS Cluster : Terraform'){
            when { expression {  params.action == 'create' } }
            steps{
                dir('eks_module')  {
                    sh"""
                    
                    terraform init
                    teffafrom plan -var 'access_key=$ACCESS_KEY' -var 'secret_key=$SECRET_KEY' -var 'region=${params.Region}' --var-file=./config/terraform.tfvars
                    terraform apply -var 'access_key=$ACCESS_KEY' -var 'secret_key=$SECRET_KEY' -var 'region=${params.Region}' --var-file=./config/terraform.tfvars --auto-approve


                    """
                }
            }
        }
        stage('Connect to EKS'){
            when { expression {  params.action == 'create' } }
            steps{
                
                sh"""
                aws configure set aws_access_key_id "$ACCESS_KEY"
                aws configure set aws_secret_access_key_id "$SECRET_KEY"
                aws configure set region "${params.Region}"
                aws eks --region ${params.Region} update-kubeconfig --name ${params.cluster}

                """
            }
        }
        stage('Deployment on EKS cluster'){
           when { expression {  params.action == 'create' } }
           steps{
            
            def apply = false

            try{
                input message: 'Please confirm to deploy on eks', ok: 'Ready to apply the config ?'
                apply = true                
            }catch(err){
                apply= false
                currentBuild.result = 'UNSTABLE'
            }
            if (apply){

                sh"""
                kubectl apply -f .
                """
            }


           } 
        }
        
    

    }
    
}